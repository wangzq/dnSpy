<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Error1" xml:space="preserve">
    <value>错误：{0}</value>
  </data>
  <data name="Examples" xml:space="preserve">
    <value>例子：
  {0} -o c:\out\path C:\some\path
      反编译以上目录内的所有 .NET 文件并保存文件到 C:\out\path
  {0} -o c:\out\path -r C:\some\path
      反编译以上目录及其子目录内的所有 .NET 文件并保存文件到 C:\out\path
  {0} -o C:\out\path C:\some\path\*.dll
      反编译以上目录内的所有 *.dll .NET 文件并保存文件到 C:\out\path
  {0} --md 0x06000123 file.dll
      用令牌 0x06000123 反编译成员
  {0} -t system.int32 --gac-file "mscorlib, Version=4.0.0.0"
      反编译 mscorlib 中的 System.Int32</value>
  </data>
  <data name="FileOrDirDoesNotExist" xml:space="preserve">
    <value>文件/目录 '{0}' 不存在</value>
  </data>
  <data name="InvalidOption" xml:space="preserve">
    <value>选项无效：{0}</value>
  </data>
  <data name="InvalidSolutionName" xml:space="preserve">
    <value>.sln 名称 ({0}) 必须是相对于工程目录</value>
  </data>
  <data name="InvalidToken" xml:space="preserve">
    <value>元数据令牌无效</value>
  </data>
  <data name="InvalidVSVersion" xml:space="preserve">
    <value>Visual Studio 版本无效：{0}</value>
  </data>
  <data name="LanguageDoesNotExist" xml:space="preserve">
    <value>语言 '{0}' 不存在</value>
  </data>
  <data name="Languages" xml:space="preserve">
    <value>语言：</value>
  </data>
  <data name="LanguageXDoesNotExist" xml:space="preserve">
    <value>语言 {0} 不存在</value>
  </data>
  <data name="MissingAsmSearchPath" xml:space="preserve">
    <value>缺失程序集搜索路径</value>
  </data>
  <data name="MissingDotNetFilename" xml:space="preserve">
    <value>缺失 .NET 文件名</value>
  </data>
  <data name="MissingLanguageName" xml:space="preserve">
    <value>缺失语言名</value>
  </data>
  <data name="MissingMDToken" xml:space="preserve">
    <value>缺失元数据标记</value>
  </data>
  <data name="MissingNumberOfThreads" xml:space="preserve">
    <value>缺失线程数</value>
  </data>
  <data name="MissingOptions" xml:space="preserve">
    <value>未指定选项</value>
  </data>
  <data name="MissingOutputDir" xml:space="preserve">
    <value>缺失输出目录</value>
  </data>
  <data name="MissingSolutionName" xml:space="preserve">
    <value>缺失 .sln 名称</value>
  </data>
  <data name="MissingVSVersion" xml:space="preserve">
    <value>缺失 Visual Studio 版本</value>
  </data>
  <data name="NoLanguagesFound" xml:space="preserve">
    <value>未找到语言。请确保语言 DLL 文件存在于本程序所在文件夹内。</value>
  </data>
  <data name="NotDotNetFile" xml:space="preserve">
    <value>{0} 不是 .NET 文件</value>
  </data>
  <data name="OnlyOneFileCanBeDecompiled" xml:space="preserve">
    <value>当使用 --md 时仅可以反编译一个文件</value>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>{0} [选项] [文件或目录1] [文件或目录2] [...]

  --asm-path path    程序集搜索路径。您可以用 '{1}' 分隔路径或使用多个 --asm-path
  --user-gac path    用 GAC 路径。 您可以用 '{1}' 分隔路径或使用多个  --user-gac
  --no-gac     不使用 GAC 搜寻程序集。用 --no-stdlib时有用
  --no-stdlib  工程不引用 mscorlib
  --no-sln     不创建 .sln 文件
  --sln-name name   .sln  文件的名称
  --threads N  Worker 的线程数。模式是每个 CPU 核心各一个线程
  --no-resources   不解包资源 
  --no-resx    不创建 .resx 文件
  --no-baml    不反编译 baml 为 xaml
  --vs N       Visual Studio 版本号，2005, 2008, ..., 2015
  --project-guid N    工程 GUID
  -t name      用指定的名称反编译类型到标准输出。Namespace.Name 或 Name 不区分大小写
  --type name  与 -t 参数相同
  --md N       用元数据令牌 N 反编译成员到标准输出
  --gac-file N 反编译 GAC 中的程序集。使用完整的程序集名称以使用精确的版本。
  -r           循环搜索要反编译的 .NET 文件
  -o outdir    输出目录
  -l lang      设置语言，默认是 C#。可以使用 GUID</value>
  </data>
  <data name="MissingUserGacPath" xml:space="preserve">
    <value>缺失用户 GAC（全局程序集缓存）路径</value>
  </data>
  <data name="InvalidMemberToDecompile" xml:space="preserve">
    <value>仅可以反编译类型，方法，字段，事件和属性</value>
  </data>
  <data name="CouldNotFindTypeX" xml:space="preserve">
    <value>未找到类型 {0}</value>
  </data>
  <data name="CouldNotResolveGacFileX" xml:space="preserve">
    <value>无法解析 GAC 程序集 '{0}'</value>
  </data>
  <data name="MissingGacFile" xml:space="preserve">
    <value>缺失 GAC 程序集名称</value>
  </data>
  <data name="MissingTypeName" xml:space="preserve">
    <value>缺失类型的完整名称</value>
  </data>
  <data name="LanguageXDoesNotSupportProjects" xml:space="preserve">
    <value>语言 {0} 不支持创建中的工程文件</value>
  </data>
  <data name="LanguageOptions" xml:space="preserve">
    <value>语言选项：</value>
  </data>
  <data name="LanguageOptionsDesc" xml:space="preserve">
    <value>所有布尔选项可以使用 'no-' 或 'dont-' 显示。如 --dont-sort-members</value>
  </data>
  <data name="MissingOptionArgument" xml:space="preserve">
    <value>缺失选项参数</value>
  </data>
  <data name="InvalidGuid" xml:space="preserve">
    <value>GUID 无效</value>
  </data>
</root>
