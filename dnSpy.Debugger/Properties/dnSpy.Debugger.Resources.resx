<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddBreakpointCommand" xml:space="preserve">
    <value>_Add Breakpoint</value>
  </data>
  <data name="AddExceptionCommand" xml:space="preserve">
    <value>Add E_xception</value>
  </data>
  <data name="AllFiles" xml:space="preserve">
    <value>All Files</value>
  </data>
  <data name="AppDomainNotAvailable" xml:space="preserve">
    <value>&lt;not available&gt;</value>
  </data>
  <data name="AppMenu_Debug" xml:space="preserve">
    <value>_Debug</value>
  </data>
  <data name="AppTitle_Debugging" xml:space="preserve">
    <value>Debugging</value>
  </data>
  <data name="AskAppWindowClosingStopDebugging" xml:space="preserve">
    <value>Do you want to stop debugging?</value>
  </data>
  <data name="AskDeleteAllBreakpoints" xml:space="preserve">
    <value>Do you want to delete all breakpoints?</value>
  </data>
  <data name="AttachToProcessCommand" xml:space="preserve">
    <value>Attach to _Process...</value>
  </data>
  <data name="Attach_AttachToProcess" xml:space="preserve">
    <value>Attach to Process</value>
  </data>
  <data name="Attach_AttachToProcess32" xml:space="preserve">
    <value>Attach to Process (32-bit only)</value>
  </data>
  <data name="Attach_AttachToProcess64" xml:space="preserve">
    <value>Attach to Process (64-bit only)</value>
  </data>
  <data name="Attach_UseDnSpy32" xml:space="preserve">
    <value>Use dnSpy.exe to attach to 64-bit processes</value>
  </data>
  <data name="Attach_UseDnSpy64" xml:space="preserve">
    <value>Use dnSpy-x86.exe to attach to 32-bit processes</value>
  </data>
  <data name="BreakCommand" xml:space="preserve">
    <value>Brea_k</value>
  </data>
  <data name="BreakpointsCommand" xml:space="preserve">
    <value>_Breakpoints</value>
  </data>
  <data name="BreakWhenExceptionThrownCommand" xml:space="preserve">
    <value>Break When Thrown</value>
  </data>
  <data name="Button_Attach" xml:space="preserve">
    <value>_Attach</value>
  </data>
  <data name="Button_Cancel" xml:space="preserve">
    <value>_Cancel</value>
  </data>
  <data name="Button_OK" xml:space="preserve">
    <value>_OK</value>
  </data>
  <data name="Button_Refresh" xml:space="preserve">
    <value>_Refresh</value>
  </data>
  <data name="CallStackCommand" xml:space="preserve">
    <value>Call _Stack</value>
  </data>
  <data name="CallStack_MaxFramesExceeded" xml:space="preserve">
    <value>The maximum number of stack frames supported by dnSpy has been exceeded.</value>
  </data>
  <data name="Column_Address" xml:space="preserve">
    <value>Address</value>
  </data>
  <data name="Column_AppDomain" xml:space="preserve">
    <value>AppDomain</value>
  </data>
  <data name="Column_Assembly" xml:space="preserve">
    <value>Assembly</value>
  </data>
  <data name="Column_DynamicModule" xml:space="preserve">
    <value>Dynamic</value>
  </data>
  <data name="Column_File" xml:space="preserve">
    <value>File</value>
  </data>
  <data name="Column_InMemoryModule" xml:space="preserve">
    <value>InMemory</value>
  </data>
  <data name="Column_Module" xml:space="preserve">
    <value>Module</value>
  </data>
  <data name="Column_Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Column_OptimizedModule" xml:space="preserve">
    <value>Optimized</value>
  </data>
  <data name="Column_Order" xml:space="preserve">
    <value>Order</value>
  </data>
  <data name="Column_Path" xml:space="preserve">
    <value>Path</value>
  </data>
  <data name="Column_Process" xml:space="preserve">
    <value>Process</value>
  </data>
  <data name="Column_ProcessArchitecture" xml:space="preserve">
    <value>Arch</value>
  </data>
  <data name="Column_ProcessCLR" xml:space="preserve">
    <value>CLR</value>
  </data>
  <data name="Column_ProcessFilename" xml:space="preserve">
    <value>Filename</value>
  </data>
  <data name="Column_ProcessID" xml:space="preserve">
    <value>ID</value>
  </data>
  <data name="Column_ProcessTitle" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="Column_ProcessType" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Column_ThreadAffinityMask" xml:space="preserve">
    <value>Affinity Mask</value>
  </data>
  <data name="Column_ThreadCategory" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="Column_ThreadID" xml:space="preserve">
    <value>ID</value>
  </data>
  <data name="Column_ThreadLocation" xml:space="preserve">
    <value>Location</value>
  </data>
  <data name="Column_ThreadManagedId" xml:space="preserve">
    <value>Managed ID</value>
  </data>
  <data name="Column_ThreadPriority" xml:space="preserve">
    <value>Priority</value>
  </data>
  <data name="Column_ThreadState" xml:space="preserve">
    <value>State</value>
  </data>
  <data name="Column_ThreadSuspended" xml:space="preserve">
    <value>Suspended</value>
  </data>
  <data name="Column_Timestamp" xml:space="preserve">
    <value>Timestamp</value>
  </data>
  <data name="Column_Type" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Column_Value" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="Column_Version" xml:space="preserve">
    <value>Version</value>
  </data>
  <data name="ContinueDebuggingCommand" xml:space="preserve">
    <value>_Continue</value>
  </data>
  <data name="CopyCommand" xml:space="preserve">
    <value>Cop_y</value>
  </data>
  <data name="DbgAsm_Args" xml:space="preserve">
    <value>A_rguments</value>
  </data>
  <data name="DbgAsm_Assembly" xml:space="preserve">
    <value>_Assembly</value>
  </data>
  <data name="DbgAsm_BreakAt" xml:space="preserve">
    <value>_Break at</value>
  </data>
  <data name="DbgAsm_DbgShimDllPath" xml:space="preserve">
    <value>_dbgshim.dll</value>
  </data>
  <data name="DbgAsm_Host" xml:space="preserve">
    <value>_Host</value>
  </data>
  <data name="DbgAsm_HostArgs" xml:space="preserve">
    <value>Host Ar_guments</value>
  </data>
  <data name="DbgAsm_Title" xml:space="preserve">
    <value>Debug Assembly</value>
  </data>
  <data name="DbgAsm_WorkingDir" xml:space="preserve">
    <value>_Working Directory</value>
  </data>
  <data name="DbgBreak_CreateProcessEvent" xml:space="preserve">
    <value>CreateProcess Event</value>
  </data>
  <data name="DbgBreak_Dont" xml:space="preserve">
    <value>Don't Break</value>
  </data>
  <data name="DbgBreak_EntryPoint" xml:space="preserve">
    <value>Entry Point</value>
  </data>
  <data name="DbgBreak_ExeFirstLoadClassEvent" xml:space="preserve">
    <value>Exe's First LoadClass Event</value>
  </data>
  <data name="DbgBreak_ExeLoadModuleEvent" xml:space="preserve">
    <value>Exe's LoadModule Event</value>
  </data>
  <data name="DbgBreak_FirstCreateAppDomainEvent" xml:space="preserve">
    <value>First CreateAppDomain Event</value>
  </data>
  <data name="DbgBreak_FirstCreateThreadEvent" xml:space="preserve">
    <value>First CreateThread Event</value>
  </data>
  <data name="DbgBreak_FirstLoadClassEvent" xml:space="preserve">
    <value>First LoadClass Event</value>
  </data>
  <data name="DbgBreak_FirstLoadModuleEvent" xml:space="preserve">
    <value>First LoadModule Event</value>
  </data>
  <data name="DbgBreak_ModuleClassConstructorOrEntryPoint" xml:space="preserve">
    <value>Module .cctor or Entry Point</value>
  </data>
  <data name="DbgSettings_AutoOpenLocalsWindow" xml:space="preserve">
    <value>Show the Locals window when the debugger starts</value>
  </data>
  <data name="DbgSettings_BreakAt" xml:space="preserve">
    <value>_Break at</value>
  </data>
  <data name="DbgSettings_CompilerGeneratedAttributesCanHideFields" xml:space="preserve">
    <value>CompilerGeneratedAttributes can hide fields</value>
  </data>
  <data name="DbgSettings_CoreCLRDbgShimFilename" xml:space="preserve">
    <value>CoreCLR dbgshim.dll</value>
  </data>
  <data name="DbgSettings_DebuggerBrowsableAttributesCanHidePropsFields" xml:space="preserve">
    <value>DebuggerBrowsableAttributes can hide fields and properties</value>
  </data>
  <data name="DbgSettings_DisableManagedDebuggerDetection" xml:space="preserve">
    <value>Prevent code from detecting a managed debugger</value>
  </data>
  <data name="DbgSettings_IgnoreBreakInstructions" xml:space="preserve">
    <value>Ignore Debugger.Break() and break instructions</value>
  </data>
  <data name="DbgSettings_PropertyEvalAndFunctionCalls" xml:space="preserve">
    <value>Enable property evaluation and other implicit function calls</value>
  </data>
  <data name="DbgSettings_SyntaxHighlightAttach" xml:space="preserve">
    <value>Attac_h</value>
  </data>
  <data name="DbgSettings_SyntaxHighlightBreakpoints" xml:space="preserve">
    <value>B_reakpoints</value>
  </data>
  <data name="DbgSettings_SyntaxHighlightCallStack" xml:space="preserve">
    <value>C_all Stack</value>
  </data>
  <data name="DbgSettings_SyntaxHighlightExceptions" xml:space="preserve">
    <value>E_xceptions</value>
  </data>
  <data name="DbgSettings_SyntaxHighlightLocals" xml:space="preserve">
    <value>_Locals</value>
  </data>
  <data name="DbgSettings_SyntaxHighlightModules" xml:space="preserve">
    <value>_Modules</value>
  </data>
  <data name="DbgSettings_SyntaxHighlightThreads" xml:space="preserve">
    <value>_Threads</value>
  </data>
  <data name="DbgSettings_UseMemoryModules" xml:space="preserve">
    <value>Debug files loaded from the process' memory (uncheck to use disk files)</value>
  </data>
  <data name="DbgSettings_UseStringConversionFunction" xml:space="preserve">
    <value>Call string-conversion function on objects in variables windows</value>
  </data>
  <data name="DebugAssemblyCommand" xml:space="preserve">
    <value>_Debug Assembly</value>
  </data>
  <data name="DebugAssemblyCommand2" xml:space="preserve">
    <value>Debug an Assembl_y...</value>
  </data>
  <data name="DebugCoreCLRAssemblyCommand" xml:space="preserve">
    <value>Debug a CoreCLR Assembl_y...</value>
  </data>
  <data name="DebuggerOptDlgTab" xml:space="preserve">
    <value>Debugger</value>
  </data>
  <data name="DebugProgramX" xml:space="preserve">
    <value>_Debug {0}</value>
  </data>
  <data name="Debug_EventDescription_BreakpointSetError" xml:space="preserve">
    <value>BreakpointSetError error=0x{0:X8}</value>
  </data>
  <data name="Debug_EventDescription_ControlCPressed" xml:space="preserve">
    <value>Ctrl+C</value>
  </data>
  <data name="Debug_EventDescription_CreateAppDomain" xml:space="preserve">
    <value>CreateAppDomain {0} {1}</value>
  </data>
  <data name="Debug_EventDescription_CreateProcess" xml:space="preserve">
    <value>CreateProcess PID={0} CLR v{1}</value>
  </data>
  <data name="Debug_EventDescription_CreateThread" xml:space="preserve">
    <value>CreateThread TID={0} VTID={1}</value>
  </data>
  <data name="Debug_EventDescription_DebuggerError" xml:space="preserve">
    <value>DebuggerError hr=0x{0:X8} error=0x{1:X8}</value>
  </data>
  <data name="Debug_EventDescription_Exception" xml:space="preserve">
    <value>Exception</value>
  </data>
  <data name="Debug_EventDescription_Exception2" xml:space="preserve">
    <value>Exception Offset={0:X4}</value>
  </data>
  <data name="Debug_EventDescription_Exception2_CatchHandlerFound" xml:space="preserve">
    <value>CatchHandlerFound</value>
  </data>
  <data name="Debug_EventDescription_Exception2_FirstChance" xml:space="preserve">
    <value>FirstChance</value>
  </data>
  <data name="Debug_EventDescription_Exception2_Unhandled" xml:space="preserve">
    <value>Unhandled</value>
  </data>
  <data name="Debug_EventDescription_Exception2_Unknown" xml:space="preserve">
    <value>Unknown</value>
  </data>
  <data name="Debug_EventDescription_Exception2_UserFirstChance" xml:space="preserve">
    <value>UserFirstChance</value>
  </data>
  <data name="Debug_EventDescription_LoadAssembly" xml:space="preserve">
    <value>LoadAssembly {0}</value>
  </data>
  <data name="Debug_EventDescription_LoadClass" xml:space="preserve">
    <value>LoadClass 0x{0:X8} {1} {2}</value>
  </data>
  <data name="Debug_EventDescription_LoadModule1" xml:space="preserve">
    <value>LoadModule DYN={0} MEM={1} {2:X8} {3:X8} {4}</value>
  </data>
  <data name="Debug_EventDescription_LoadModule2" xml:space="preserve">
    <value>LoadModule A={0:X8} S={1:X8} {2}</value>
  </data>
  <data name="Debug_EventDescription_MDA_Notification" xml:space="preserve">
    <value>MDA Notification</value>
  </data>
  <data name="Debug_EventDescription_MDA_Notification2" xml:space="preserve">
    <value>MDA Notification: TID={0} {1} {2}</value>
  </data>
  <data name="Debug_EventDescription_UnhandledException" xml:space="preserve">
    <value>Unhandled Exception</value>
  </data>
  <data name="Debug_StopReason_AnyDebugEventBreakpoint" xml:space="preserve">
    <value>Any DebugEvent</value>
  </data>
  <data name="Debug_StopReason_BreakInstruction" xml:space="preserve">
    <value>Break Instruction</value>
  </data>
  <data name="Debug_StopReason_DebugEventBreakpoint" xml:space="preserve">
    <value>DebugEvent</value>
  </data>
  <data name="Debug_StopReason_Exception" xml:space="preserve">
    <value>Exception</value>
  </data>
  <data name="Debug_StopReason_ILCodeBreakpoint" xml:space="preserve">
    <value>IL Breakpoint</value>
  </data>
  <data name="Debug_StopReason_UnhandledException" xml:space="preserve">
    <value>Unhandled Exception</value>
  </data>
  <data name="Debug_StopReason_Unknown" xml:space="preserve">
    <value>Unknown Reason</value>
  </data>
  <data name="DeleteAllBreakpointsCommand" xml:space="preserve">
    <value>Delete _All Breakpoints</value>
  </data>
  <data name="DeleteBreakpointCommand" xml:space="preserve">
    <value>D_elete Breakpoint</value>
  </data>
  <data name="DeleteBreakpointsCommand" xml:space="preserve">
    <value>D_elete Breakpoints</value>
  </data>
  <data name="DeleteCommand" xml:space="preserve">
    <value>_Delete</value>
  </data>
  <data name="DetachCommand" xml:space="preserve">
    <value>_Detach</value>
  </data>
  <data name="DisableAllBreakpointsCommand" xml:space="preserve">
    <value>Disable All Breakpoi_nts</value>
  </data>
  <data name="DisableAllFilteredExceptionsCommand" xml:space="preserve">
    <value>_Disable All Filtered Exceptions</value>
  </data>
  <data name="DisableBreakpointCommand2" xml:space="preserve">
    <value>_Disable Breakpoint</value>
  </data>
  <data name="DisableBreakpointsCommand2" xml:space="preserve">
    <value>_Disable Breakpoints</value>
  </data>
  <data name="EnableAllBreakpointsCommand" xml:space="preserve">
    <value>Enable All Breakpoi_nts</value>
  </data>
  <data name="EnableAllFilteredExceptionsCommand" xml:space="preserve">
    <value>_Enable All Filtered Exceptions</value>
  </data>
  <data name="EnableBreakpointCommand" xml:space="preserve">
    <value>_Enable Breakpoint</value>
  </data>
  <data name="EnableBreakpointCommand2" xml:space="preserve">
    <value>Enab_le Breakpoint</value>
  </data>
  <data name="EnableBreakpointsCommand" xml:space="preserve">
    <value>_Enable Breakpoints</value>
  </data>
  <data name="EnableBreakpointsCommand2" xml:space="preserve">
    <value>Enab_le Breakpoints</value>
  </data>
  <data name="ErrorOccurredX" xml:space="preserve">
    <value>An error occurred:

{0}</value>
  </data>
  <data name="Error_CantEvalUnlessDebuggerStopped" xml:space="preserve">
    <value>Can't evaluate unless debugger is stopped</value>
  </data>
  <data name="Error_CantEvalWhenUnhandledExceptionHasOccurred" xml:space="preserve">
    <value>Can't evaluate when an unhandled exception has occurred</value>
  </data>
  <data name="Error_CantSetNextStatementHere" xml:space="preserve">
    <value>It's not possible to set the next statement here</value>
  </data>
  <data name="Error_CantSetNextStatementNoILFrame" xml:space="preserve">
    <value>There's no IL frame</value>
  </data>
  <data name="Error_CantSetNextStatementToAnotherMethod" xml:space="preserve">
    <value>The next statement cannot be set to another method</value>
  </data>
  <data name="Error_CantSetNextStatementWhenNotStopped" xml:space="preserve">
    <value>Can't set next statement when the process is running</value>
  </data>
  <data name="Error_CLRDebuggerErrorOccurred" xml:space="preserve">
    <value>A CLR debugger error occurred. Terminate the debugged process and try again.

HR: 0x{0:X8}
Error: 0x{1:X8}</value>
  </data>
  <data name="Error_CouldNotBreakProcess" xml:space="preserve">
    <value>Could not break process. Error: 0x{0:X8}</value>
  </data>
  <data name="Error_CouldNotDetachProcess" xml:space="preserve">
    <value>Could not detach process. Error: 0x{0:X8}</value>
  </data>
  <data name="Error_CouldNotSetNextStatement" xml:space="preserve">
    <value>Could not set the next statement.</value>
  </data>
  <data name="Error_CouldNotSetNextStatement_UnknownReason" xml:space="preserve">
    <value>Could not set next statement (unknown reason)</value>
  </data>
  <data name="Error_CouldNotStartDebugger" xml:space="preserve">
    <value>Could not start the debugger. {0}</value>
  </data>
  <data name="Error_CouldNotStartDebugger2" xml:space="preserve">
    <value>Could not start debugger.

Error: {0}</value>
  </data>
  <data name="Error_CouldNotStartDebuggerCheckAccessToFile" xml:space="preserve">
    <value>Could not start the debugger. Make sure you have access to the file '{0}'

Error: {1}</value>
  </data>
  <data name="Error_CouldNotStartDebuggerRequireAdminPrivLvl" xml:space="preserve">
    <value>Could not start the debugger. The debugged program requires admin privileges. Restart dnSpy with admin rights and try again.</value>
  </data>
  <data name="Error_FileDoesNotExist" xml:space="preserve">
    <value>The file doesn't exist</value>
  </data>
  <data name="Error_HostEgCoreRunExe" xml:space="preserve">
    <value>The host eg. CoreRun.exe</value>
  </data>
  <data name="Error_MissingFilename" xml:space="preserve">
    <value>Missing filename</value>
  </data>
  <data name="Error_NoDebugInfoAvailable" xml:space="preserve">
    <value>No debug information found. Make sure that only the debugged method is selected in the treeview (press 'Alt+Num *' to go to current statement)</value>
  </data>
  <data name="Error_NoTabAvailableDecompileCurrentMethod" xml:space="preserve">
    <value>No tab is available. Decompile the current method!</value>
  </data>
  <data name="Error_NotDebugging" xml:space="preserve">
    <value>We're not debugging</value>
  </data>
  <data name="Error_StartWithoutDebuggingCouldNotStart" xml:space="preserve">
    <value>Could not start '{0}'
ERROR: {0}</value>
  </data>
  <data name="Error_UnhandledExceptionOccurred" xml:space="preserve">
    <value>An unhandled exception occurred in {0}

{1}

Press OK to stop, and Cancel to let the program run.</value>
  </data>
  <data name="ExceptionInfoFormat" xml:space="preserve">
    <value>{0}: {1}

Message: {2}

HResult: 0x{3:X8}</value>
  </data>
  <data name="ExceptionInfo_Exception" xml:space="preserve">
    <value>Exception</value>
  </data>
  <data name="ExceptionInfo_InnerException" xml:space="preserve">
    <value>Inner Exception</value>
  </data>
  <data name="ExceptionSettingsCommand" xml:space="preserve">
    <value>E_xception Settings</value>
  </data>
  <data name="Exceptions_Add_Error_Name" xml:space="preserve">
    <value>Missing full name of exception, eg. System.My.Exception</value>
  </data>
  <data name="Exceptions_Add_Label" xml:space="preserve">
    <value>_Full name</value>
  </data>
  <data name="Exceptions_Add_Title" xml:space="preserve">
    <value>Add Exception</value>
  </data>
  <data name="Exceptions_Add_ToolTip" xml:space="preserve">
    <value>Add an exception to the list</value>
  </data>
  <data name="Exceptions_AllCLRExceptionsNotInList" xml:space="preserve">
    <value>&lt;All Common Language Runtime Exceptions not in this list&gt;</value>
  </data>
  <data name="Exceptions_Remove_ToolTip" xml:space="preserve">
    <value>Remove an exception from the list</value>
  </data>
  <data name="Exceptions_RestoreSettings_ToolTip" xml:space="preserve">
    <value>Restore the list to the default settings</value>
  </data>
  <data name="Exceptions_Search" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="Exceptions_Search_ToolTip" xml:space="preserve">
    <value>Search for an exception (Ctrl+F)</value>
  </data>
  <data name="Exceptions_ShowOnlyEnabledExceptions_ToolTip" xml:space="preserve">
    <value>Show only enabled exceptions</value>
  </data>
  <data name="ExceptionThrownMessage" xml:space="preserve">
    <value>Exception thrown: '{0}' in {1}

If there is a handler for this exception, the program may be safely continued.</value>
  </data>
  <data name="FreezeThreadCommand" xml:space="preserve">
    <value>_Freeze</value>
  </data>
  <data name="GoToCodeCommand" xml:space="preserve">
    <value>_Go To Code</value>
  </data>
  <data name="GoToCodeNewTabCommand" xml:space="preserve">
    <value>Go To Code (New _Tab)</value>
  </data>
  <data name="GoToDisassemblyCommand" xml:space="preserve">
    <value>Go To Disassembly</value>
  </data>
  <data name="GoToDisassemblyCommand2" xml:space="preserve">
    <value>Go To _Disassembly</value>
  </data>
  <data name="GoToModuleCommand" xml:space="preserve">
    <value>_Go To Module</value>
  </data>
  <data name="HexDisplayCommand" xml:space="preserve">
    <value>_Hexadecimal Display</value>
  </data>
  <data name="LoadModule_InfoText" xml:space="preserve">
    <value>Loading the module. This could take a while if it's a big module.</value>
  </data>
  <data name="LoadModule_Title" xml:space="preserve">
    <value>Loading Dynamic Modules</value>
  </data>
  <data name="LocalsAddWatchCommand" xml:space="preserve">
    <value>Add _Watch</value>
  </data>
  <data name="LocalsCollapseChildrenNodesCommand" xml:space="preserve">
    <value>_Collapse Children</value>
  </data>
  <data name="LocalsCollapseParentNodeCommand" xml:space="preserve">
    <value>C_ollapse Parent</value>
  </data>
  <data name="LocalsCommand" xml:space="preserve">
    <value>_Locals</value>
  </data>
  <data name="LocalsCopyValueCommand" xml:space="preserve">
    <value>Copy Va_lue</value>
  </data>
  <data name="LocalsEditValueCommand" xml:space="preserve">
    <value>_Edit Value</value>
  </data>
  <data name="LocalsEditValue_Error_CanNotWriteNewValueToThisType" xml:space="preserve">
    <value>Can't write a new value to this type.</value>
  </data>
  <data name="LocalsEditValue_Error_CanOnlyBeSetToNull" xml:space="preserve">
    <value>You can only set it to null</value>
  </data>
  <data name="LocalsEditValue_Error_CouldNotCallPropSetter" xml:space="preserve">
    <value>Error calling property setter: 0x{0:X8}</value>
  </data>
  <data name="LocalsEditValue_Error_CouldNotWriteNewValue" xml:space="preserve">
    <value>Could not set value: {0}</value>
  </data>
  <data name="LocalsEditValue_Error_CouldNotWriteNullToNullableType" xml:space="preserve">
    <value>Error writing null to nullable type: 0x{0:X8}</value>
  </data>
  <data name="LocalsEditValue_Error_CouldNotWriteTheValue" xml:space="preserve">
    <value>Could not write the value. Error: 0x{0:X8}</value>
  </data>
  <data name="LocalsEditValue_Error_CouldNotWriteValueDueToException" xml:space="preserve">
    <value>Could not write the value
ERROR: {0}</value>
  </data>
  <data name="LocalsEditValue_Error_EnterSomeText" xml:space="preserve">
    <value>Enter some text</value>
  </data>
  <data name="LocalsEditValue_Error_ExceptionOccurredInDebuggedProcess" xml:space="preserve">
    <value>An exception occurred in the debugged process: {0}</value>
  </data>
  <data name="LocalsEditValue_Error_FieldCanNotBeEdited" xml:space="preserve">
    <value>This field can't be edited</value>
  </data>
  <data name="LocalsEditValue_Error_InvalidEnumValue" xml:space="preserve">
    <value>Invalid enum value</value>
  </data>
  <data name="LocalsEditValue_Error_InvalidNumber" xml:space="preserve">
    <value>Invalid number</value>
  </data>
  <data name="LocalsEditValue_Error_UnknownEnumValue" xml:space="preserve">
    <value>Unknown enum value '{0}'</value>
  </data>
  <data name="LocalsEditValue_Error_ValueCanNotBeEdited" xml:space="preserve">
    <value>This value can't be edited</value>
  </data>
  <data name="LocalsEditValue_Error_ValueTypeIsTooBig" xml:space="preserve">
    <value>Value type is too big</value>
  </data>
  <data name="LocalsExpandChildrenNodesCommand" xml:space="preserve">
    <value>E_xpand Children</value>
  </data>
  <data name="LocalsSaveCommand" xml:space="preserve">
    <value>_Save...</value>
  </data>
  <data name="LocalsSave_Error_CouldNotGetArrayData" xml:space="preserve">
    <value>Could not get array data</value>
  </data>
  <data name="LocalsSave_Error_CouldNotReadAnyData" xml:space="preserve">
    <value>Could not read any data</value>
  </data>
  <data name="LocalsSave_Error_CouldNotSaveDataToFilename" xml:space="preserve">
    <value>Error saving data to '{0}'
ERROR: {1}</value>
  </data>
  <data name="Locals_Ask_TooManyItems" xml:space="preserve">
    <value>This item contains more than {0} child items and will be limited to displaying that number of items when expanded.

Are you sure you want to expand it?</value>
  </data>
  <data name="Locals_Error_CantEvaluateCantCreateStrings" xml:space="preserve">
    <value>It's currently not possible to create new strings</value>
  </data>
  <data name="Locals_Error_CantEvaluateWhenThreadIsAtUnsafePoint" xml:space="preserve">
    <value>Can't evaluate when the thread is at an unsafe point. Step once or run until a breakpoint hits.</value>
  </data>
  <data name="Locals_Error_CouldNotCreateString" xml:space="preserve">
    <value>Couldn't create a string. Error: 0x{0:X8}</value>
  </data>
  <data name="Locals_Error_CouldNotCreateString2" xml:space="preserve">
    <value>Couldn't create the new string</value>
  </data>
  <data name="Locals_Error_CouldNotCreateStringDueToException" xml:space="preserve">
    <value>An exception occurred in the debugged program and the string couldn't be created</value>
  </data>
  <data name="Locals_Error_CouldNotRecreateTheValue" xml:space="preserve">
    <value>Could not re-create the value</value>
  </data>
  <data name="Locals_Error_ErrorNeuteredCouldNotBeRecreated" xml:space="preserve">
    <value>The value has been neutered and couldn't be recreated</value>
  </data>
  <data name="Locals_Error_EvalDisabledCantCallPropsAndMethods" xml:space="preserve">
    <value>It's currently not possible to call properties and methods</value>
  </data>
  <data name="Locals_Error_EvalTimedOutCantCreateNewStringsUntilContinue" xml:space="preserve">
    <value>Evaluation timed out and it's not possible to create new strings until you continue the debugged program</value>
  </data>
  <data name="Locals_Error_EvalTimedOutIsDisabled" xml:space="preserve">
    <value>Evaluation timed out and has been disabled until you continue the debugged program.</value>
  </data>
  <data name="Locals_Error_EvaluationTimedOut" xml:space="preserve">
    <value>Evaluation timed out</value>
  </data>
  <data name="Locals_Error_PropertyFuncEvalHasBeenDisabledInSettings" xml:space="preserve">
    <value>Property/function evaluation has been disabled in the settings</value>
  </data>
  <data name="Locals_Error_StaticFieldIsNotYetAvailable" xml:space="preserve">
    <value>Static field is not yet available</value>
  </data>
  <data name="Locals_TypeVariables" xml:space="preserve">
    <value>Type variables</value>
  </data>
  <data name="MemoryWindowCommand" xml:space="preserve">
    <value>_Memory</value>
  </data>
  <data name="ModuleCopyFilenameCommand" xml:space="preserve">
    <value>Copy Filename</value>
  </data>
  <data name="ModuleSaveModulesTitle" xml:space="preserve">
    <value>Save Modules</value>
  </data>
  <data name="ModuleSaveModuleTitle" xml:space="preserve">
    <value>Save Module</value>
  </data>
  <data name="ModulesCommand" xml:space="preserve">
    <value>Mod_ules</value>
  </data>
  <data name="Module_BreakProcessBeforeLoadingDynamicModules" xml:space="preserve">
    <value>You must break the process before dynamic modules can be loaded.</value>
  </data>
  <data name="Module_NoAddress" xml:space="preserve">
    <value>&lt;no address&gt;</value>
  </data>
  <data name="OpenContainingFolderCommand" xml:space="preserve">
    <value>_Open Containing Folder</value>
  </data>
  <data name="OpenModuleFromMemoryCommand" xml:space="preserve">
    <value>Open Module from Memory</value>
  </data>
  <data name="Process_CLR_CoreCLR" xml:space="preserve">
    <value>CoreCLR</value>
  </data>
  <data name="Process_CLR_Desktop" xml:space="preserve">
    <value>Desktop</value>
  </data>
  <data name="ReloadAllMethodBodiesCommand" xml:space="preserve">
    <value>Reload All Method Bodies</value>
  </data>
  <data name="RemoveExceptionCommand" xml:space="preserve">
    <value>_Remove</value>
  </data>
  <data name="RenameThreadCommand" xml:space="preserve">
    <value>Rename</value>
  </data>
  <data name="RestartCommand" xml:space="preserve">
    <value>_Restart</value>
  </data>
  <data name="RestoreDefaultExceptionSettingsCommand" xml:space="preserve">
    <value>Restore Defaults</value>
  </data>
  <data name="RunToCursorCommand" xml:space="preserve">
    <value>Ru_n To Cursor</value>
  </data>
  <data name="SaveModuleCommand" xml:space="preserve">
    <value>Save Module...</value>
  </data>
  <data name="SaveModulesCommand" xml:space="preserve">
    <value>Save {0} Modules...</value>
  </data>
  <data name="SelectAllCommand" xml:space="preserve">
    <value>Select _All</value>
  </data>
  <data name="SetNextStatementCommand" xml:space="preserve">
    <value>Set Ne_xt Statement</value>
  </data>
  <data name="ShortCutAltAsterisk" xml:space="preserve">
    <value>Alt+Num *</value>
  </data>
  <data name="ShortCutKeyAlt4" xml:space="preserve">
    <value>Alt+4</value>
  </data>
  <data name="ShortCutKeyAlt6" xml:space="preserve">
    <value>Alt+6</value>
  </data>
  <data name="ShortCutKeyCtrlA" xml:space="preserve">
    <value>Ctrl+A</value>
  </data>
  <data name="ShortCutKeyCtrlAltB" xml:space="preserve">
    <value>Ctrl+Alt+B</value>
  </data>
  <data name="ShortCutKeyCtrlAltC" xml:space="preserve">
    <value>Ctrl+Alt+C</value>
  </data>
  <data name="ShortCutKeyCtrlAltE" xml:space="preserve">
    <value>Ctrl+Alt+E</value>
  </data>
  <data name="ShortCutKeyCtrlAltH" xml:space="preserve">
    <value>Ctrl+Alt+H</value>
  </data>
  <data name="ShortCutKeyCtrlAltP" xml:space="preserve">
    <value>Ctrl+Alt+P</value>
  </data>
  <data name="ShortCutKeyCtrlAltU" xml:space="preserve">
    <value>Ctrl+Alt+U</value>
  </data>
  <data name="ShortCutKeyCtrlShift_DIGIT" xml:space="preserve">
    <value>Ctrl+Shift+{0}</value>
  </data>
  <data name="ShortCutKeyCtrlBreak" xml:space="preserve">
    <value>Ctrl+Break</value>
  </data>
  <data name="ShortCutKeyCtrlC" xml:space="preserve">
    <value>Ctrl+C</value>
  </data>
  <data name="ShortCutKeyCtrlEnter" xml:space="preserve">
    <value>Ctrl+Enter</value>
  </data>
  <data name="ShortCutKeyCtrlF10" xml:space="preserve">
    <value>Ctrl+F10</value>
  </data>
  <data name="ShortCutKeyCtrlF5" xml:space="preserve">
    <value>Ctrl+F5</value>
  </data>
  <data name="ShortCutKeyCtrlF9" xml:space="preserve">
    <value>Ctrl+F9</value>
  </data>
  <data name="ShortCutKeyCtrlShiftC" xml:space="preserve">
    <value>Ctrl+Shift+C</value>
  </data>
  <data name="ShortCutKeyCtrlShiftF10" xml:space="preserve">
    <value>Ctrl+Shift+F10</value>
  </data>
  <data name="ShortCutKeyCtrlShiftF5" xml:space="preserve">
    <value>Ctrl+Shift+F5</value>
  </data>
  <data name="ShortCutKeyCtrlShiftF9" xml:space="preserve">
    <value>Ctrl+Shift+F9</value>
  </data>
  <data name="ShortCutKeyCtrl_DIGIT" xml:space="preserve">
    <value>Ctrl+{0}</value>
  </data>
  <data name="ShortCutKeyDelete" xml:space="preserve">
    <value>Del</value>
  </data>
  <data name="ShortCutKeyEnter" xml:space="preserve">
    <value>Enter</value>
  </data>
  <data name="ShortCutKeyF10" xml:space="preserve">
    <value>F10</value>
  </data>
  <data name="ShortCutKeyF11" xml:space="preserve">
    <value>F11</value>
  </data>
  <data name="ShortCutKeyF2" xml:space="preserve">
    <value>F2</value>
  </data>
  <data name="ShortCutKeyF5" xml:space="preserve">
    <value>F5</value>
  </data>
  <data name="ShortCutKeyF9" xml:space="preserve">
    <value>F9</value>
  </data>
  <data name="ShortCutKeyInsert" xml:space="preserve">
    <value>Ins</value>
  </data>
  <data name="ShortCutKeyShiftF11" xml:space="preserve">
    <value>Shift+F11</value>
  </data>
  <data name="ShortCutKeyShiftF5" xml:space="preserve">
    <value>Shift+F5</value>
  </data>
  <data name="ShowInMemoryWindowCommand" xml:space="preserve">
    <value>Show in Memory Window</value>
  </data>
  <data name="ShowInstructionPointerCommand" xml:space="preserve">
    <value>Show IP</value>
  </data>
  <data name="ShowModuleNamesCommand" xml:space="preserve">
    <value>Show _Module Names</value>
  </data>
  <data name="ShowNamespacesCommand" xml:space="preserve">
    <value>Show Namespaces</value>
  </data>
  <data name="ShowNextStatementCommand" xml:space="preserve">
    <value>S_how Next Statement</value>
  </data>
  <data name="ShowOwnerTypesCommand" xml:space="preserve">
    <value>Show Owner Types</value>
  </data>
  <data name="ShowParameterNamesCommand" xml:space="preserve">
    <value>Show _Parameter Names</value>
  </data>
  <data name="ShowParameterTypesCommand" xml:space="preserve">
    <value>Show Parameter _Types</value>
  </data>
  <data name="ShowParameterValuesCommand" xml:space="preserve">
    <value>Show Parameter _Values</value>
  </data>
  <data name="ShowReturnTypesCommand" xml:space="preserve">
    <value>Show Return Types</value>
  </data>
  <data name="ShowTokensCommand" xml:space="preserve">
    <value>Show Tokens</value>
  </data>
  <data name="ShowTypeKeywordsCommand" xml:space="preserve">
    <value>Show Type Keywords</value>
  </data>
  <data name="StartWithoutDebuggingCommand" xml:space="preserve">
    <value>Start Wit_hout Debugging</value>
  </data>
  <data name="StatusBar_Ready" xml:space="preserve">
    <value>Ready</value>
  </data>
  <data name="StatusBar_Ready2" xml:space="preserve">
    <value>Ready - {0}</value>
  </data>
  <data name="StatusBar_Running" xml:space="preserve">
    <value>Running...</value>
  </data>
  <data name="StepIntoCommand" xml:space="preserve">
    <value>Step _Into</value>
  </data>
  <data name="StepOutCommand" xml:space="preserve">
    <value>Step Ou_t</value>
  </data>
  <data name="StepOverCommand" xml:space="preserve">
    <value>Step _Over</value>
  </data>
  <data name="StopDebuggingCommand" xml:space="preserve">
    <value>Stop D_ebugging</value>
  </data>
  <data name="SwitchToFrameCommand" xml:space="preserve">
    <value>_Switch To Frame</value>
  </data>
  <data name="SwitchToFrameNewTabCommand" xml:space="preserve">
    <value>Switch To Frame (New _Tab)</value>
  </data>
  <data name="SwitchToThreadCommand" xml:space="preserve">
    <value>_Switch To Thread</value>
  </data>
  <data name="SwitchToThreadNewTabCommand" xml:space="preserve">
    <value>Switch To Thread (New _Tab)</value>
  </data>
  <data name="ThawThreadCommand" xml:space="preserve">
    <value>_Thaw</value>
  </data>
  <data name="ThreadsCommand" xml:space="preserve">
    <value>T_hreads</value>
  </data>
  <data name="ThreadType_BackgroundGC_or_Finalizer" xml:space="preserve">
    <value>BGC / Finalizer</value>
  </data>
  <data name="ThreadType_Main" xml:space="preserve">
    <value>Main Thread</value>
  </data>
  <data name="ThreadType_Terminated" xml:space="preserve">
    <value>Terminated Thread</value>
  </data>
  <data name="ThreadType_ThreadPool" xml:space="preserve">
    <value>Thread Pool</value>
  </data>
  <data name="ThreadType_Unknown" xml:space="preserve">
    <value>Unknown Thread</value>
  </data>
  <data name="ThreadType_Worker" xml:space="preserve">
    <value>Worker Thread</value>
  </data>
  <data name="Thread_LocationNotAvailable" xml:space="preserve">
    <value>&lt;not available&gt;</value>
  </data>
  <data name="Thread_NoName" xml:space="preserve">
    <value>&lt;No Name&gt;</value>
  </data>
  <data name="Thread_Priority_AboveNormal" xml:space="preserve">
    <value>Above Normal</value>
  </data>
  <data name="Thread_Priority_BelowNormal" xml:space="preserve">
    <value>Below Normal</value>
  </data>
  <data name="Thread_Priority_Highest" xml:space="preserve">
    <value>Highest</value>
  </data>
  <data name="Thread_Priority_Lowest" xml:space="preserve">
    <value>Lowest</value>
  </data>
  <data name="Thread_Priority_Normal" xml:space="preserve">
    <value>Normal</value>
  </data>
  <data name="Thread_UserState_Background" xml:space="preserve">
    <value>Background</value>
  </data>
  <data name="Thread_UserState_Stopped" xml:space="preserve">
    <value>Stopped</value>
  </data>
  <data name="Thread_UserState_StopRequested" xml:space="preserve">
    <value>StopRequested</value>
  </data>
  <data name="Thread_UserState_Suspended" xml:space="preserve">
    <value>Suspended</value>
  </data>
  <data name="Thread_UserState_SuspendRequested" xml:space="preserve">
    <value>SuspendRequested</value>
  </data>
  <data name="Thread_UserState_ThreadPool" xml:space="preserve">
    <value>ThreadPool</value>
  </data>
  <data name="Thread_UserState_UnsafePoint" xml:space="preserve">
    <value>UnsafePoint</value>
  </data>
  <data name="Thread_UserState_Unstarted" xml:space="preserve">
    <value>Unstarted</value>
  </data>
  <data name="Thread_UserState_WaitSleepJoin" xml:space="preserve">
    <value>WaitSleepJoin</value>
  </data>
  <data name="ToggleBreakpointCommand" xml:space="preserve">
    <value>To_ggle Breakpoint</value>
  </data>
  <data name="ToolBarBreakToolTip" xml:space="preserve">
    <value>Break (Ctrl+Break)</value>
  </data>
  <data name="ToolBarContinueDebuggingButton" xml:space="preserve">
    <value>Continue</value>
  </data>
  <data name="ToolBarContinueDebuggingToolTip" xml:space="preserve">
    <value>Continue (F5)</value>
  </data>
  <data name="ToolBarDebugAssemblyToolTip" xml:space="preserve">
    <value>Debug an Assembly (F5)</value>
  </data>
  <data name="ToolBarRestartToolTip" xml:space="preserve">
    <value>Restart (Ctrl+Shift+F5)</value>
  </data>
  <data name="ToolBarShowNextStatementToolTip" xml:space="preserve">
    <value>Show Next Statement (Alt+Num *)</value>
  </data>
  <data name="ToolBarStartDebuggingButton" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="ToolBarStepIntoToolTip" xml:space="preserve">
    <value>Step Into (F11)</value>
  </data>
  <data name="ToolBarStepOutToolTip" xml:space="preserve">
    <value>Step Out (Shift+F11)</value>
  </data>
  <data name="ToolBarStepOverToolTip" xml:space="preserve">
    <value>Step Over (F10)</value>
  </data>
  <data name="ToolBarStopDebuggingToolTip" xml:space="preserve">
    <value>Stop Debugging (Shift+F5)</value>
  </data>
  <data name="UnknownExceptionType" xml:space="preserve">
    <value>&lt;Unknown Exception Type&gt;</value>
  </data>
  <data name="UseDnSpy64ExeToDebug32" xml:space="preserve">
    <value>Use dnSpy-x86.exe to debug 32-bit applications.</value>
  </data>
  <data name="UseDnSpyExeToDebug64" xml:space="preserve">
    <value>Use dnSpy.exe to debug 64-bit applications.</value>
  </data>
  <data name="Window_Breakpoints" xml:space="preserve">
    <value>Breakpoints</value>
  </data>
  <data name="Window_CallStack" xml:space="preserve">
    <value>Call Stack</value>
  </data>
  <data name="Window_ExceptionSettings" xml:space="preserve">
    <value>Exception Settings</value>
  </data>
  <data name="Window_Locals" xml:space="preserve">
    <value>Locals</value>
  </data>
  <data name="Window_Memory_10_MenuItem" xml:space="preserve">
    <value>Memory 1_0</value>
  </data>
  <data name="Window_Memory_N" xml:space="preserve">
    <value>Memory {0}</value>
  </data>
  <data name="Window_Memory_N_MenuItem" xml:space="preserve">
    <value>Memory _{0}</value>
  </data>
  <data name="Window_Memory_N_MenuItem2" xml:space="preserve">
    <value>Memory {0}</value>
  </data>
  <data name="Window_Modules" xml:space="preserve">
    <value>Modules</value>
  </data>
  <data name="Window_Threads" xml:space="preserve">
    <value>Threads</value>
  </data>
  <data name="YesNo_No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="YesNo_Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="DbgSettings_SyntaxHighlight" xml:space="preserve">
    <value>_Syntax highlight</value>
  </data>
  <data name="LoadModulesCommand" xml:space="preserve">
    <value>Open Modules</value>
  </data>
  <data name="LoadXModulesCommand" xml:space="preserve">
    <value>Open {0} Modules</value>
  </data>
  <data name="DeleteAllBreakpointsCommand2" xml:space="preserve">
    <value>Delete All Breakpoints</value>
  </data>
  <data name="ShowParameterTypesCommand2" xml:space="preserve">
    <value>Show Parameter Types</value>
  </data>
  <data name="Plugin_ShortDescription" xml:space="preserve">
    <value>.NET debugger</value>
  </data>
  <data name="Debug_StopReason_Breakpoint" xml:space="preserve">
    <value>Breakpoint</value>
  </data>
</root>