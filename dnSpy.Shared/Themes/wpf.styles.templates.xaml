<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:shtv="clr-namespace:ICSharpCode.TreeView;assembly=ICSharpCode.TreeView"
                    xmlns:avalonsearch="clr-namespace:ICSharpCode.AvalonEdit.Search;assembly=ICSharpCode.AvalonEdit"
                    xmlns:avalonedit="clr-namespace:ICSharpCode.AvalonEdit;assembly=ICSharpCode.AvalonEdit"
                    xmlns:avalonediting="clr-namespace:ICSharpCode.AvalonEdit.Editing;assembly=ICSharpCode.AvalonEdit"
                    xmlns:ctrls="clr-namespace:dnSpy.Shared.Controls"
                    xmlns:p="clr-namespace:dnSpy.Shared.Properties"
                    xmlns:hex="clr-namespace:dnSpy.Shared.Hex"
                    xmlns:mvvmvc="clr-namespace:dnSpy.Shared.MVVM.Converters"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

	<!--
	AvalonEdit styles and templates
	-->

	<Style TargetType="{x:Type avalonsearch:DropDownButton}">
		<Setter Property="TextElement.Foreground" Value = "{DynamicResource SystemColorsControlText}" />
		<Setter Property="Control.Padding" Value="2,2,2,2"/>
		<Setter Property="Border.BorderThickness" Value="1,1,1,1"/>
		<Setter Property="Panel.Background" Value="Transparent"/>
		<Setter Property="Border.BorderBrush" Value="Transparent"/>
		<Setter Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
		<Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
		<Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
		<Setter Property="Control.VerticalContentAlignment" Value="Center"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="avalonsearch:DropDownButton"
				                 xmlns:s="clr-namespace:System;assembly=mscorlib">
					<Border
						BorderThickness="{TemplateBinding Border.BorderThickness}"
						BorderBrush="{TemplateBinding Border.BorderBrush}"
						Background="{TemplateBinding Panel.Background}"
						Name="OuterBorder"
						SnapsToDevicePixels="True"
					>
						<StackPanel Orientation="Horizontal">
							<ContentPresenter
								Margin="{TemplateBinding Control.Padding}"
								Content="{TemplateBinding ContentControl.Content}"
								ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
								ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
								HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
								SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
							<Path Margin="0,2,2,2"
							      Data = "M0,0 L1,0 0.5,1 z"
							      Fill = "{TemplateBinding TextElement.Foreground}"
							      Width = "7"
							      Height = "3.5"
							      Stretch = "Fill"/>
						</StackPanel>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="UIElement.IsMouseOver" Value="True">
							<Setter Property="Border.BorderBrush" TargetName="OuterBorder" Value="{DynamicResource AvalonEditSearchDropDownButtonActiveBorder}" />
							<Setter Property="Panel.Background" TargetName="OuterBorder" Value="{DynamicResource AvalonEditSearchDropDownButtonActiveBackground}"/>
						</Trigger>
						<Trigger Property="UIElement.IsKeyboardFocused" Value="True">
							<Setter Property="Border.BorderBrush" TargetName="OuterBorder" Value="{DynamicResource AvalonEditSearchDropDownButtonActiveBorder}"/>
							<Setter Property="Panel.Background" TargetName="OuterBorder" Value="{DynamicResource AvalonEditSearchDropDownButtonActiveBackground}"/>
						</Trigger>
						<Trigger Property="UIElement.IsEnabled" Value="False">
							<Setter Property="TextElement.Foreground" Value="{DynamicResource SystemColorsGrayText}"/>
						</Trigger>
						<Trigger Property="avalonsearch:DropDownButton.IsDropDownContentOpen" Value="True">
							<Setter Property="Border.BorderBrush" TargetName="OuterBorder" Value="{DynamicResource SystemColorsControlDark}" />
							<Setter Property="Border.BorderThickness" TargetName="OuterBorder" Value="1,1,1,0" />
							<Setter Property="Border.Padding" TargetName="OuterBorder" Value="0,0,0,1" />
							<Setter Property="Panel.Background" TargetName="OuterBorder" Value="Transparent"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="avalonsearch:SearchPanel">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type avalonsearch:SearchPanel}">
					<Border Background="{DynamicResource SystemColorsWindow}" BorderBrush="{DynamicResource SystemColorsWindowText}" BorderThickness="1" HorizontalAlignment="Right" VerticalAlignment="Top" Cursor="Arrow">
						<StackPanel Orientation="Horizontal">
							<TextBox Name="PART_searchTextBox" Focusable="True" Width="150" Height="24" Margin="3,3,3,0">
								<TextBox.Text>
									<Binding Path="SearchPattern" RelativeSource="{RelativeSource TemplatedParent}" UpdateSourceTrigger="PropertyChanged">
										<Binding.ValidationRules>
											<ExceptionValidationRule />
										</Binding.ValidationRules>
									</Binding>
								</TextBox.Text>
							</TextBox>
							<avalonsearch:DropDownButton Height="24">
								<avalonsearch:DropDownButton.DropDownContent>
									<Popup StaysOpen="False">
										<Border Background="{DynamicResource SystemColorsWindow}" BorderBrush="{DynamicResource SystemColorsWindowText}" BorderThickness="1">
											<StackPanel Orientation="Vertical">
												<CheckBox IsChecked="{Binding MatchCase, RelativeSource={RelativeSource TemplatedParent}}" Content="{Binding Localization.MatchCaseText, RelativeSource={RelativeSource TemplatedParent}}" Margin="3" />
												<CheckBox IsChecked="{Binding WholeWords, RelativeSource={RelativeSource TemplatedParent}}" Content="{Binding Localization.MatchWholeWordsText, RelativeSource={RelativeSource TemplatedParent}}" Margin="3" />
												<CheckBox IsChecked="{Binding UseRegex, RelativeSource={RelativeSource TemplatedParent}}" Content="{Binding Localization.UseRegexText, RelativeSource={RelativeSource TemplatedParent}}" Margin="3" />
											</StackPanel>
										</Border>
									</Popup>
								</avalonsearch:DropDownButton.DropDownContent>
							</avalonsearch:DropDownButton>
							<Button Style="{DynamicResource ButtonResource}" Margin="3" Height="24" Width="24" Command="avalonsearch:SearchCommands.FindPrevious" ToolTip="{Binding Localization.FindPreviousText, RelativeSource={RelativeSource TemplatedParent}}">
								<Path Fill="{DynamicResource ListArrowBackground}" Width="16" Height="16" Data="{StaticResource ListUpArrow16x16}">
									<Path.LayoutTransform>
										<RotateTransform Angle="270" />
									</Path.LayoutTransform>
								</Path>
							</Button>
							<Button Style="{DynamicResource ButtonResource}" Margin="3" Height="24" Width="24" Command="avalonsearch:SearchCommands.FindNext" ToolTip="{Binding Localization.FindNextText, RelativeSource={RelativeSource TemplatedParent}}">
								<Path Fill="{DynamicResource ListArrowBackground}" Width="16" Height="16" Data="{StaticResource ListUpArrow16x16}">
									<Path.LayoutTransform>
										<RotateTransform Angle="90" />
									</Path.LayoutTransform>
								</Path>
							</Button>
							<Button Style="{DynamicResource ButtonResource}" Height="16" Width="16" HorizontalAlignment="Right" VerticalAlignment="Top" Command="avalonsearch:SearchCommands.CloseSearchPanel"
							        VerticalContentAlignment="Center" HorizontalContentAlignment="Center" Focusable="False">
								<Path Data="M 0,0 L 8,8 M 8,0 L 0,8" Stroke="{DynamicResource SystemColorsControlText}" StrokeThickness="1" />
							</Button>
						</StackPanel>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type avalonedit:TextEditor}">
		<Setter Property="Foreground" Value="{DynamicResource SystemColorsWindowText}" />
		<Setter Property="Background" Value="{DynamicResource SystemColorsWindow}" />
		<Setter Property="FlowDirection" Value="LeftToRight"/> <!-- AvalonEdit does not support RTL, so ensure we use LTR by default -->
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type avalonedit:TextEditor}">
					<ScrollViewer
						Focusable="False"
						Name="PART_ScrollViewer"
						CanContentScroll="True"
						VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}"
						HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}"
						Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TextArea}"
						VerticalContentAlignment="Top"
						HorizontalContentAlignment="Left"
						Background="{TemplateBinding Background}"
						Padding="{TemplateBinding Padding}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
					/>
					<ControlTemplate.Triggers>
						<Trigger Property="WordWrap"
						         Value="True">
							<Setter TargetName="PART_ScrollViewer"
							        Property="HorizontalScrollBarVisibility"
							        Value="Disabled" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<Style TargetType="{x:Type avalonediting:TextArea}" x:Shared="False">
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<!-- TODO: The original style also set opacity to 0.7 -->
		<Setter Property="SelectionBrush" Value="{DynamicResource SystemColorsHighlight}"/>
		<Setter Property="SelectionBorder">
			<Setter.Value>
				<Pen Brush="{DynamicResource SystemColorsHighlight}"
				     Thickness="1"/>
			</Setter.Value>
		</Setter>
		<Setter Property="SelectionForeground" Value="{DynamicResource SystemColorsHighlightText}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type avalonediting:TextArea}">
					<DockPanel Focusable="False">
						<ItemsControl DockPanel.Dock="Left"
						              Focusable="False"
						              ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=LeftMargins}">
							<ItemsControl.ItemsPanel>
								<ItemsPanelTemplate>
									<StackPanel Orientation="Horizontal" />
								</ItemsPanelTemplate>
							</ItemsControl.ItemsPanel>
						</ItemsControl>
						<ContentPresenter
							Panel.ZIndex="-1"
							Focusable="False"
							Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TextView}"/>
					</DockPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--
	End of AvalonEdit styles and templates
	-->

	<Style x:Key="{x:Type ctrls:TabButton}"
		   TargetType="{x:Type ctrls:TabButton}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="TextElement.Foreground" Value="{Binding GlyphForeground, RelativeSource={RelativeSource Self}}"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Padding" Value="1"/>
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ctrls:TabButton}">
					<Border x:Name="Border"
							BorderBrush="{TemplateBinding BorderBrush}"
							Background="{TemplateBinding Background}"
							BorderThickness="1"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
						<ContentPresenter Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
					</Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="BorderBrush"
									TargetName="Border"
                                    Value="{Binding HoverBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="Background"
									TargetName="Border"
                                    Value="{Binding HoverBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
							<Setter Property="BorderThickness"
									TargetName="Border"
                                    Value="{Binding HoverBorderThickness, RelativeSource={RelativeSource TemplatedParent}}"/>
							<Setter Property="TextElement.Foreground"
                                    Value="{Binding HoverForeground, RelativeSource={RelativeSource Self}}"/>
						</Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="BorderBrush"
									TargetName="Border"
                                    Value="{Binding PressedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="Background"
									TargetName="Border"
                                    Value="{Binding PressedBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
							<Setter Property="BorderThickness"
									TargetName="Border"
                                    Value="{Binding PressedBorderThickness, RelativeSource={RelativeSource TemplatedParent}}"/>
							<Setter Property="TextElement.Foreground"
                                    Value="{Binding PressedForeground, RelativeSource={RelativeSource Self}}"/>
						</Trigger>
                    </ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="{x:Type ctrls:WinSysButton}"
		   TargetType="{x:Type ctrls:WinSysButton}"
		   BasedOn="{StaticResource {x:Type ctrls:TabButton}}">
		<Setter Property="Margin" Value="0" />
		<Setter Property="Padding" Value="0,3,0,0" />
		<Setter Property="Width" Value="34" />
		<Setter Property="Height" Value="25" />
		<Setter Property="VerticalAlignment" Value="Top" />
		<Setter Property="HorizontalAlignment" Value="Center" />
		<Setter Property="BorderThickness" Value="1,0,1,1" />
		<Setter Property="HoverBorderThickness" Value="1,0,1,1" />
		<Setter Property="PressedBorderThickness" Value="1,0,1,1" />
		<Setter Property="BorderBrush" Value="{DynamicResource EnvironmentMainWindowButtonActiveBorder}" />
		<Setter Property="GlyphForeground" Value="{DynamicResource EnvironmentMainWindowButtonActiveGlyph}" />
		<Setter Property="HoverBackground" Value="{DynamicResource EnvironmentMainWindowButtonHoverActive}" />
		<Setter Property="HoverBorderBrush" Value="{DynamicResource EnvironmentMainWindowButtonHoverActiveBorder}" />
		<Setter Property="HoverForeground" Value="{DynamicResource EnvironmentMainWindowButtonHoverActiveGlyph}" />
		<Setter Property="PressedBackground" Value="{DynamicResource EnvironmentMainWindowButtonDown}" />
		<Setter Property="PressedBorderBrush" Value="{DynamicResource EnvironmentMainWindowButtonDownBorder}" />
		<Setter Property="PressedForeground" Value="{DynamicResource EnvironmentMainWindowButtonDownGlyph}" />
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ctrls:WinSysButton}">
					<Border x:Name="Border"
							BorderBrush="{TemplateBinding BorderBrush}"
							Background="{TemplateBinding Background}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
						<Path
							x:Name="path"
							Margin="{TemplateBinding Padding}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource Self}}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver"
                                 Value="true">
							<Setter Property="BorderBrush"
									TargetName="Border"
                                    Value="{Binding HoverBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
							<Setter Property="Background"
									TargetName="Border"
                                    Value="{Binding HoverBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
							<Setter Property="BorderThickness"
									TargetName="Border"
                                    Value="{Binding HoverBorderThickness, RelativeSource={RelativeSource TemplatedParent}}"/>
							<Setter Property="TextElement.Foreground"
                                    Value="{Binding HoverForeground, RelativeSource={RelativeSource Self}}"/>
						</Trigger>
						<Trigger Property="IsPressed"
                                 Value="true">
							<Setter Property="BorderBrush"
									TargetName="Border"
                                    Value="{Binding PressedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
							<Setter Property="Background"
									TargetName="Border"
                                    Value="{Binding PressedBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
							<Setter Property="BorderThickness"
									TargetName="Border"
                                    Value="{Binding PressedBorderThickness, RelativeSource={RelativeSource TemplatedParent}}"/>
							<Setter Property="TextElement.Foreground"
                                    Value="{Binding PressedForeground, RelativeSource={RelativeSource Self}}"/>
						</Trigger>
						<Trigger Property="CurrentWinSysType" Value="Minimize">
							<Setter Property="ToolTip" Value="{x:Static p:dnSpy_Shared_Resources.Window_Minimize}" />
							<Setter TargetName="path" Property="Width" Value="9" />
							<Setter TargetName="path" Property="Height" Value="9" />
							<Setter TargetName="path" Property="Stretch" Value="None" />
							<Setter TargetName="path" Property="Data" Value="F1M0,6L0,9 9,9 9,6 0,6z" />
						</Trigger>
						<Trigger Property="CurrentWinSysType" Value="Maximize">
							<Setter Property="ToolTip" Value="{x:Static p:dnSpy_Shared_Resources.Window_Maximize}" />
							<Setter TargetName="path" Property="Width" Value="9" />
							<Setter TargetName="path" Property="Height" Value="9" />
							<Setter TargetName="path" Property="Stretch" Value="Uniform" />
							<Setter TargetName="path" Property="Data" Value="F1M0,0L0,9 9,9 9,0 0,0 0,3 8,3 8,8 1,8 1,3z" />
						</Trigger>
						<Trigger Property="CurrentWinSysType" Value="Restore">
							<Setter Property="ToolTip" Value="{x:Static p:dnSpy_Shared_Resources.Window_Restore}" />
							<Setter TargetName="path" Property="Width" Value="10" />
							<Setter TargetName="path" Property="Height" Value="10" />
							<Setter TargetName="path" Property="Stretch" Value="Uniform" />
							<Setter TargetName="path" Property="Data" Value="F1M0,10L0,3 3,3 3,0 10,0 10,2 4,2 4,3 7,3 7,6 6,6 6,5 1,5 1,10z M1,10L7,10 7,7 10,7 10,2 9,2 9,6 6,6 6,9 1,9z" />
						</Trigger>
						<Trigger Property="CurrentWinSysType" Value="Close">
							<Setter Property="ToolTip" Value="{x:Static p:dnSpy_Shared_Resources.Window_Close}" />
							<Setter TargetName="path" Property="Width" Value="10" />
							<Setter TargetName="path" Property="Height" Value="8" />
							<Setter TargetName="path" Property="Stretch" Value="Uniform" />
							<Setter TargetName="path" Property="Data" Value="F1M0,0L2,0 5,3 8,0 10,0 6,4 10,8 8,8 5,5 2,8 0,8 4,4 0,0z" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Type ctrls:SysMenuButton}" TargetType="{x:Type ctrls:SysMenuButton}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ctrls:SysMenuButton}">
					<ContentPresenter
						RecognizesAccessKey="True"
						Margin="{TemplateBinding Padding}"
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
						HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
						Focusable="False" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="{x:Type ctrls:MetroWindow}" TargetType="{x:Type ctrls:MetroWindow}">
		<Setter Property="UseLayoutRounding" Value="True"/>
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="Icon" Value="../Images/dnSpy.ico"/>
		<Setter Property="IsDebugging" Value="{DynamicResource IsDebuggingKey}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ctrls:MetroWindow}">
					<Border
						x:Name="border"
						ctrls:MetroWindow.MaximizedElement="True"
						BorderBrush="{TemplateBinding ActiveDefaultBorder}"
						BorderThickness="1"
						Background="{TemplateBinding Background}"
						TextElement.Foreground="{TemplateBinding Foreground}"
						>
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition x:Name="titleBarRowDef" Height="{x:Static ctrls:MetroWindow.GridCaptionHeight}" />
								<RowDefinition Height="*" />
							</Grid.RowDefinitions>
							<DockPanel
								x:Name="titleBar"
								Grid.Row="0"
								Background="{TemplateBinding ActiveCaption}"
								TextElement.Foreground="{TemplateBinding ActiveCaptionText}"
								>
								<ctrls:SysMenuButton
									DockPanel.Dock="Left"
									WindowChrome.IsHitTestVisibleInChrome="True"
									Command="{x:Static ctrls:MetroWindow.ShowSystemMenuCommand}"
									CommandParameter="{Binding RelativeSource={RelativeSource Self}}"
									Width="16"
									Height="16"
									Margin="4 7 4 7"
									Padding="0 0 0 0"
									Background="Transparent"
									VerticalAlignment="Center"
									Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ShowMenuButton, Converter={StaticResource BooleanToVisibilityConverter}}" >
									<Image Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SystemMenuImage}" />
								</ctrls:SysMenuButton>
								<StackPanel DockPanel.Dock="Right" Orientation="Horizontal" WindowChrome.IsHitTestVisibleInChrome="True">
									<ctrls:WinSysButton x:Name="minButton" WinSysType="Minimize" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ShowMinimizeButton, Converter={StaticResource BooleanToVisibilityConverter}}" />
									<ctrls:WinSysButton x:Name="maxButton" WinSysType="Maximize" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ShowMaximizeButton, Converter={StaticResource BooleanToVisibilityConverter}}" />
									<ctrls:WinSysButton x:Name="closeButton" WinSysType="Close" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ShowCloseButton, Converter={StaticResource BooleanToVisibilityConverter}}" />
								</StackPanel>
								<TextBlock
									Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Title}"
									Margin="5 0 0 0"
									HorizontalAlignment="Left"
									VerticalAlignment="Center"
									TextTrimming="CharacterEllipsis"
									TextWrapping="NoWrap" />
							</DockPanel>
							<Grid Grid.Row="1">
								<AdornerDecorator>
									<ContentPresenter/>
								</AdornerDecorator>
			
								<ResizeGrip x:Name="WindowResizeGrip"
											HorizontalAlignment="Right"
											VerticalAlignment="Bottom"
											Visibility="Collapsed"
											IsTabStop="false"/>
							</Grid>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsFullScreen" Value="True">
							<Setter Property="WindowState" Value="Maximized" />
							<Setter TargetName="titleBar" Property="Visibility" Value="Collapsed" />
							<Setter TargetName="titleBarRowDef" Property="Height" Value="0" />
							<Setter TargetName="border" Property="BorderThickness" Value="0" />
							<Setter Property="ResizeMode" Value="NoResize" />
							<Setter Property="UseResizeBorder" Value="False" />
							<Setter Property="WindowStyle" Value="None" />
						</Trigger>
						<Trigger Property="ResizeMode" Value="NoResize">
							<Setter Property="UseResizeBorder" Value="False" />
						</Trigger>
						<Trigger Property="WindowState" Value="Maximized">
							<Setter Property="UseResizeBorder" Value="False" />
						</Trigger>
						<Trigger Property="IsDebugging" Value="True">
							<Setter TargetName="border" Property="BorderBrush" Value="{Binding ActiveDebuggingBorder, RelativeSource={RelativeSource AncestorType={x:Type ctrls:MetroWindow}}}" />
						</Trigger>
						<Trigger Property="IsActive" Value="False">
							<Setter TargetName="border" Property="BorderBrush" Value="{Binding InactiveBorder, RelativeSource={RelativeSource AncestorType={x:Type ctrls:MetroWindow}}}" />
							<Setter TargetName="titleBar" Property="Background" Value="{Binding InactiveCaption, RelativeSource={RelativeSource AncestorType={x:Type ctrls:MetroWindow}}}" />
							<Setter TargetName="titleBar" Property="TextElement.Foreground" Value="{Binding InactiveCaptionText, RelativeSource={RelativeSource AncestorType={x:Type ctrls:MetroWindow}}}" />
							<Setter TargetName="minButton" Property="BorderBrush" Value="{Binding ButtonInactiveBorder, RelativeSource={RelativeSource AncestorType={x:Type ctrls:MetroWindow}}}" />
							<Setter TargetName="minButton" Property="GlyphForeground" Value="{Binding ButtonInactiveGlyph, RelativeSource={RelativeSource AncestorType={x:Type ctrls:MetroWindow}}}" />
							<Setter TargetName="minButton" Property="HoverBackground" Value="{Binding ButtonHoverInactive, RelativeSource={RelativeSource AncestorType={x:Type ctrls:MetroWindow}}}" />
							<Setter TargetName="minButton" Property="HoverBorderBrush" Value="{Binding ButtonHoverInactiveBorder, RelativeSource={RelativeSource AncestorType={x:Type ctrls:MetroWindow}}}" />
							<Setter TargetName="minButton" Property="HoverForeground" Value="{Binding ButtonHoverInactiveGlyph, RelativeSource={RelativeSource AncestorType={x:Type ctrls:MetroWindow}}}" />
							<Setter TargetName="maxButton" Property="BorderBrush" Value="{Binding ButtonInactiveBorder, RelativeSource={RelativeSource AncestorType={x:Type ctrls:MetroWindow}}}" />
							<Setter TargetName="maxButton" Property="GlyphForeground" Value="{Binding ButtonInactiveGlyph, RelativeSource={RelativeSource AncestorType={x:Type ctrls:MetroWindow}}}" />
							<Setter TargetName="maxButton" Property="HoverBackground" Value="{Binding ButtonHoverInactive, RelativeSource={RelativeSource AncestorType={x:Type ctrls:MetroWindow}}}" />
							<Setter TargetName="maxButton" Property="HoverBorderBrush" Value="{Binding ButtonHoverInactiveBorder, RelativeSource={RelativeSource AncestorType={x:Type ctrls:MetroWindow}}}" />
							<Setter TargetName="maxButton" Property="HoverForeground" Value="{Binding ButtonHoverInactiveGlyph, RelativeSource={RelativeSource AncestorType={x:Type ctrls:MetroWindow}}}" />
							<Setter TargetName="closeButton" Property="BorderBrush" Value="{Binding ButtonInactiveBorder, RelativeSource={RelativeSource AncestorType={x:Type ctrls:MetroWindow}}}" />
							<Setter TargetName="closeButton" Property="GlyphForeground" Value="{Binding ButtonInactiveGlyph, RelativeSource={RelativeSource AncestorType={x:Type ctrls:MetroWindow}}}" />
							<Setter TargetName="closeButton" Property="HoverBackground" Value="{Binding ButtonHoverInactive, RelativeSource={RelativeSource AncestorType={x:Type ctrls:MetroWindow}}}" />
							<Setter TargetName="closeButton" Property="HoverBorderBrush" Value="{Binding ButtonHoverInactiveBorder, RelativeSource={RelativeSource AncestorType={x:Type ctrls:MetroWindow}}}" />
							<Setter TargetName="closeButton" Property="HoverForeground" Value="{Binding ButtonHoverInactiveGlyph, RelativeSource={RelativeSource AncestorType={x:Type ctrls:MetroWindow}}}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="ResizeMode"
			                               Value="CanResizeWithGrip"/>
								<Condition Property="WindowState"
			                               Value="Normal"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="WindowResizeGrip"
			                        Property="Visibility"
			                        Value="Visible"/>
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="MainWindowStyle" TargetType="{x:Type ctrls:MetroWindow}" BasedOn="{StaticResource {x:Type ctrls:MetroWindow}}">
		<Setter Property="Foreground" Value="{DynamicResource EnvironmentForeground}" />
		<Setter Property="Background" Value="{DynamicResource EnvironmentBackground}" />
		<Setter Property="ActiveCaption" Value="{DynamicResource EnvironmentMainWindowActiveCaption}" />
		<Setter Property="ActiveCaptionText" Value="{DynamicResource EnvironmentMainWindowActiveCaptionText}" />
		<Setter Property="ActiveDebuggingBorder" Value="{DynamicResource EnvironmentMainWindowActiveDebuggingBorder}" />
		<Setter Property="ActiveDefaultBorder" Value="{DynamicResource EnvironmentMainWindowActiveDefaultBorder}" />
		<Setter Property="InactiveBorder" Value="{DynamicResource EnvironmentMainWindowInactiveBorder}" />
		<Setter Property="InactiveCaption" Value="{DynamicResource EnvironmentMainWindowInactiveCaption}" />
		<Setter Property="InactiveCaptionText" Value="{DynamicResource EnvironmentMainWindowInactiveCaptionText}" />
		<Setter Property="ButtonInactiveBorder" Value="{DynamicResource EnvironmentMainWindowButtonInactiveBorder}" />
		<Setter Property="ButtonInactiveGlyph" Value="{DynamicResource EnvironmentMainWindowButtonInactiveGlyph}" />
		<Setter Property="ButtonHoverInactive" Value="{DynamicResource EnvironmentMainWindowButtonHoverInactive}" />
		<Setter Property="ButtonHoverInactiveBorder" Value="{DynamicResource EnvironmentMainWindowButtonHoverInactiveBorder}" />
		<Setter Property="ButtonHoverInactiveGlyph" Value="{DynamicResource EnvironmentMainWindowButtonHoverInactiveGlyph}" />
		<Setter Property="ShowMenuButton" Value="True" />
		<Setter Property="ShowMinimizeButton" Value="True" />
		<Setter Property="ShowMaximizeButton" Value="True" />
		<Setter Property="ShowCloseButton" Value="True" />
	</Style>
	<Style x:Key="DialogWindowStyle" TargetType="{x:Type ctrls:MetroWindow}" BasedOn="{StaticResource {x:Type ctrls:MetroWindow}}">
		<Setter Property="Foreground" Value="{DynamicResource DialogWindowForeground}"/>
		<Setter Property="Background" Value="{DynamicResource DialogWindowBackground}"/>
		<Setter Property="ActiveCaption" Value="{DynamicResource DialogWindowActiveCaption}" />
		<Setter Property="ActiveCaptionText" Value="{DynamicResource DialogWindowActiveCaptionText}" />
		<Setter Property="ActiveDebuggingBorder" Value="{DynamicResource DialogWindowActiveDebuggingBorder}" />
		<Setter Property="ActiveDefaultBorder" Value="{DynamicResource DialogWindowActiveDefaultBorder}" />
		<Setter Property="InactiveBorder" Value="{DynamicResource DialogWindowInactiveBorder}" />
		<Setter Property="InactiveCaption" Value="{DynamicResource DialogWindowInactiveCaption}" />
		<Setter Property="InactiveCaptionText" Value="{DynamicResource DialogWindowInactiveCaptionText}" />
		<Setter Property="ButtonInactiveBorder" Value="{DynamicResource DialogWindowButtonInactiveBorder}" />
		<Setter Property="ButtonInactiveGlyph" Value="{DynamicResource DialogWindowButtonInactiveGlyph}" />
		<Setter Property="ButtonHoverInactive" Value="{DynamicResource DialogWindowButtonHoverInactive}" />
		<Setter Property="ButtonHoverInactiveBorder" Value="{DynamicResource DialogWindowButtonHoverInactiveBorder}" />
		<Setter Property="ButtonHoverInactiveGlyph" Value="{DynamicResource DialogWindowButtonHoverInactiveGlyph}" />
		<Setter Property="ShowMenuButton" Value="False" />
		<Setter Property="ShowMinimizeButton" Value="False" />
		<Setter Property="ShowMaximizeButton" Value="False" />
		<Setter Property="ShowCloseButton" Value="True" />
		<Setter Property="ShowInTaskbar" Value="False"/>
		<Setter Property="ResizeMode" Value="CanResizeWithGrip" />
	</Style>
	<Style x:Key="DialogBorderStyle" TargetType="{x:Type Border}">
		<Setter Property="BorderBrush" Value="{DynamicResource TabItemSelectedBackground}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Background" Value="{DynamicResource SystemColorsControl}"/>
	</Style>
	<Style x:Key="DialogButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="Padding" Value="10,1,10,1" />
		<Setter Property="MinWidth" Value="75" />
		<Setter Property="MinHeight" Value="23" />
		<Setter Property="VerticalAlignment" Value="Center" />
	</Style>
	<Style x:Key="OtherDialogButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="Height" Value="23"/>
		<Setter Property="MinHeight" Value="23" />
		<Setter Property="VerticalAlignment" Value="Center" />
	</Style>
	<Style x:Key="EllipsisButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="Padding" Value="7 0 7 0" />
		<Setter Property="Content" Value="..." />
		<Setter Property="VerticalAlignment" Value="Stretch" />
	</Style>
	<Style x:Key="TextEditorButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="Padding" Value="10,1,10,1" />
		<Setter Property="MinWidth" Value="75" />
		<Setter Property="MinHeight" Value="23" />
		<Setter Property="Cursor" Value="Arrow" />
	</Style>

    <DataTemplate DataType="{x:Type hex:HexEditorAppSettingsVM}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <GroupBox Grid.Row="0" Header="{x:Static p:dnSpy_Shared_Resources.Font}">
                <Grid>
                    <Grid.Resources>
                        <mvvmvc:FontSizeConverter x:Key="fontSizeConverter" />
                    </Grid.Resources>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="50" />
                    </Grid.RowDefinitions>
                    <ComboBox Grid.Column="0" Margin="3,0" HorizontalAlignment="Stretch" VerticalContentAlignment="Center" SelectedItem="{Binding FontFamily}" ItemsSource="{Binding FontFamilies}">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding Source}" />
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>
                    <ComboBox Grid.Column="1" Text="{Binding Settings.FontSize, Converter={StaticResource fontSizeConverter}}" IsEditable="True" Margin="3,0">
                        <ComboBoxItem>6</ComboBoxItem>
                        <ComboBoxItem>7</ComboBoxItem>
                        <ComboBoxItem>8</ComboBoxItem>
                        <ComboBoxItem>9</ComboBoxItem>
                        <ComboBoxItem>10</ComboBoxItem>
                        <ComboBoxItem>11</ComboBoxItem>
                        <ComboBoxItem>12</ComboBoxItem>
                        <ComboBoxItem>13</ComboBoxItem>
                        <ComboBoxItem>14</ComboBoxItem>
                        <ComboBoxItem>15</ComboBoxItem>
                        <ComboBoxItem>16</ComboBoxItem>
                        <ComboBoxItem>17</ComboBoxItem>
                        <ComboBoxItem>18</ComboBoxItem>
                        <ComboBoxItem>19</ComboBoxItem>
                        <ComboBoxItem>20</ComboBoxItem>
                        <ComboBoxItem>21</ComboBoxItem>
                        <ComboBoxItem>22</ComboBoxItem>
                        <ComboBoxItem>23</ComboBoxItem>
                        <ComboBoxItem>24</ComboBoxItem>
                    </ComboBox>
                    <Border Grid.Row="1" Grid.ColumnSpan="4" BorderBrush="{DynamicResource SystemColorsControlDarkDark}" BorderThickness="1" Background="{DynamicResource SystemColorsWindow}" Margin="3,5">
                        <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="AaBbCcIiOoXxYyZz" FontFamily="{Binding Settings.FontFamily}" FontSize="{Binding Settings.FontSize}" />
                    </Border>
                </Grid>
            </GroupBox>

            <GroupBox Grid.Row="1" Header="{x:Static p:dnSpy_Shared_Resources.HexEditorSettings_OtherOptions}">
                <Grid Margin="3">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>

                    <Label Grid.Row="0" Grid.Column="0" Margin="0 5 0 0" Target="{Binding ElementName=bytesPerLineTextBox}" Content="{x:Static p:dnSpy_Shared_Resources.LocalHexSettings_BytesPerLine}" />
                    <TextBox Grid.Row="0" Grid.Column="1" Margin="5 5 0 0" Name="bytesPerLineTextBox" Text="{Binding BytesPerLineVM.StringValue, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" />
                    <Label Grid.Row="0" Grid.Column="2" Margin="5 5 0 0" Target="{Binding ElementName=bytesGroupCountTextBox}" Content="{x:Static p:dnSpy_Shared_Resources.LocalHexSettings_ByteGroupSize}" />
                    <TextBox Grid.Row="0" Grid.Column="3" Margin="5 5 0 0" Name="bytesGroupCountTextBox" Text="{Binding BytesGroupCountVM.StringValue, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}" />

                    <Label Grid.Row="1" Grid.Column="0" Margin="0 5 0 0" Content="{x:Static p:dnSpy_Shared_Resources.LocalHexSettings_Encoding}" Target="{Binding ElementName=encodingComboBox}" />
                    <ComboBox Grid.Row="1" Grid.Column="1" Margin="5 5 0 0" HorizontalAlignment="Stretch" Name="encodingComboBox" DisplayMemberPath="Name" ItemsSource="{Binding AsciiEncodingVM.Items}" SelectedIndex="{Binding AsciiEncodingVM.SelectedIndex}" VerticalContentAlignment="Center" />

                    <CheckBox Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding Settings.UseHexPrefix}" Content="{x:Static p:dnSpy_Shared_Resources.LocalHexSettings_UseHexPrefix}" />
                    <CheckBox Grid.Row="2" Grid.Column="2" Grid.ColumnSpan="2" Margin="5 5 0 0" IsChecked="{Binding Settings.ShowAscii}" Content="{x:Static p:dnSpy_Shared_Resources.LocalHexSettings_ShowASCII}" />
                    <CheckBox Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2" Margin="0 5 0 0" IsChecked="{Binding Settings.LowerCaseHex}" Content="{x:Static p:dnSpy_Shared_Resources.LocalHexSettings_LowerCaseHex}" />
                </Grid>
            </GroupBox>
        </Grid>
    </DataTemplate>

</ResourceDictionary>